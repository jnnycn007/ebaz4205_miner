#!/usr/bin/env python
# Sample code for ARM of Unicorn. Nguyen Anh Quynh <aquynh@gmail.com>
# Python sample ported by Loi Anh Tuan <loianhtuan@gmail.com>

##from __future__ import print_function

from unicorn import *
from unicorn.arm_const import *

import struct

f = open ( "../bootrom.bin", mode="rb" )
rom_code = f.read ()
f.close ()

print ( len(rom_code), " bytes in rom image" )

# mov r0, #0x37; sub r1, r2, r3
arm_list = [ 0xe3a00037, 0xe0421003 ]

#arm_pack = struct.pack ( "<2L", *arm_list)
arm_pack = struct.pack ( "<{}L".format(len(arm_list)), *arm_list)

print ( len(arm_list), " ARM instructions" )
print ( len(arm_pack), " bytes when packed" )

# code to be emulated
#ARM_CODE   = b"\x37\x00\xa0\xe3\x03\x10\x42\xe0"

# memory address where emulation starts
ADDRESS    = 0x10000

# callback for tracing basic blocks
def hook_block(uc, address, size, user_data):
    print(">>> Tracing basic block at 0x%x, block size = 0x%x" %(address, size))


# callback for tracing instructions
def hook_code(uc, address, size, user_data):
    print(">>> Tracing instruction at 0x%x, instruction size = 0x%x" %(address, size))


# Test ARM
def test_arm():
    print("Emulate ARM code")
    try:
        # Initialize emulator in ARM mode
        mu = Uc(UC_ARCH_ARM, UC_MODE_ARM)

        # map 2MB memory for this emulation
        #mu.mem_map(ADDRESS, 2 * 1024 * 1024)
        mu.mem_map(ADDRESS, 128 * 1024)

        # write machine code to be emulated to memory
        #mu.mem_write(ADDRESS, ARM_CODE)
        mu.mem_write(ADDRESS, arm_pack)

        # initialize machine registers
        mu.reg_write(UC_ARM_REG_R0, 0x1234)
        mu.reg_write(UC_ARM_REG_R2, 0x6789)
        mu.reg_write(UC_ARM_REG_R3, 0x3333)
        mu.reg_write(UC_ARM_REG_APSR, 0xFFFFFFFF) #All application flags turned on
   
        # tracing all basic blocks with customized callback
        mu.hook_add(UC_HOOK_BLOCK, hook_block)

        # tracing one instruction at ADDRESS with customized callback
        mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=ADDRESS)

        # emulate machine code in infinite time
        #mu.emu_start(ADDRESS, ADDRESS + len(ARM_CODE))
        mu.emu_start(ADDRESS, ADDRESS + 4*len(arm_list))

        # now print out some registers
        print(">>> Emulation done. Below is the CPU context")

        r0 = mu.reg_read(UC_ARM_REG_R0)
        print(">>> R0 = 0x%x" %r0)
        r1 = mu.reg_read(UC_ARM_REG_R1)
        print(">>> R1 = 0x%x" %r1)
        pc = mu.reg_read(UC_ARM_REG_PC)
        print(">>> PC = 0x%x" %pc)

    except UcError as e:
        print("ERROR: %s" % e)

def show_sctlr ( mu ):
        # Read SCTLR
        # cp = 15
        # is64 = 0
        # sec = 0
        # crn = 1
        # crm = 0
        # opc1 = 0
        # opc2 = 0
        val = mu.reg_read(UC_ARM_REG_CP_REG, (15, 0, 0, 1, 0, 0, 0))
        print(">>> SCTLR = 0x%x" % val)


def test_read_sctlr():
    print("Read SCTLR")
    try:
        mu = Uc(UC_ARCH_ARM, UC_MODE_ARM)
        show_sctlr ( mu )

    except UcError as e:
        print("ERROR: %s" % e)

if __name__ == '__main__':
    test_arm()
    print("=" * 26)
    test_read_sctlr()

# THE END
